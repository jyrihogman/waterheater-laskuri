name: "Build server"

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  quality:
    name: Quality Checks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Check formatting
        run: cargo fmt --all --check

      - name: Lint
        run: cargo clippy --all-targets --all-features -- -D warnings

      - name: Audit
        uses: rustsec/audit-check@v1.4.1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

  build:
    needs: quality
    runs-on: ubuntu-latest
    name: "Build and push to ECR"
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: waterheater-calc
          IMAGE_TAG: latest
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f server/Dockerfile server
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

  # deploy:
  #   name: Update ECS instances with new image
  #   needs: build
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout Repository
  #       uses: actions/checkout@v2

  #     - name: Configure AWS Credentials
  #       uses: aws-actions/configure-aws-credentials@v1
  #       with:
  #         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #         aws-region: ${{ secrets.AWS_REGION }}

  #     - name: Update ECS Service
  #       run: |
  #         aws ecs update-service --cluster ${{ secrets.ECS_CLUSTER }}  --service ${{ secrets.ECS_SERVICE } --force-new-deployment
